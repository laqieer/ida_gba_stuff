// 同步IDA数据库信息到no$gba调试符号文件
// synchronize info in IDA database to no$gba debugger
// by laqieer
// 2018/02/23

#include <idc.idc>

#define SECTION_ATTR_DATA	1	// 包含数据
#define SECTION_ATTR_CODE	2	// 包含代码

static printLabel(file, ea)
{
	fprintf(file, "%08x %s\n", ea, Name(ea));
}

static handleData(file, ea)
{
	auto flags;
	
	flags = GetFlags(ea);
	
	// 垃圾字符串太多，所以过滤掉所有的字符串类型
	if(isASCII(flags))
		return;
	
	if(isByte(flags) || isChar0(flags) || isChar1(flags))
		fprintf(file, "%08x .byt:0001\n", ea);
	else
		if(isWord(flags))
			fprintf(file, "%08x .wrd:0002\n", ea);
		else
			if(isDwrd(flags) || isEnum0(flags) || isEnum1(flags) || isFloat(flags))
				fprintf(file, "%08x .dbl:0004\n", ea);
			else
				if(isASCII(flags))
					fprintf(file, "%08x .asc:%04x\n", ea, strlen(GetString(ea, -1, GetStringType(ea))));
				else
					if(isTbyt(flags))
						fprintf(file, "%08x .byt:0003\n", ea);
					else
						if(isDouble(flags))
							fprintf(file, "%08x .byt:0008\n", ea);
						else
							if(isStruct(flags))
								// 这样取不到结构体大小
								// fprintf(file, "%08x .byt:%04x\n", ea, get_struc_size(get_struc_id(Name(ea))));	// 可以进一步展开结构体访问内部成员
								fprintf(file, "%08x .byt:0008\n", ea);
	
	printLabel(file, ea);
}

static handleCode(file, ea)
{
	if(GetReg(ea, "T"))
		fprintf(file, "%08x .thumb\n", ea);
	else
		fprintf(file, "%08x .arm\n", ea);
	
	printLabel(file, ea);
	
	/* if(GetFunctionName(ea) != "" && GetFunctionAttr(ea, FUNCATTR_END) > ea)
		ea = GetFunctionAttr(ea, FUNCATTR_END); */
}

static handleSymbol(file, ea)
{
	auto flags;
	
	flags = GetFlags(ea);
	
	if(isCode(flags))
		handleCode(file, ea);
	else
		//if(isData(flags))
			handleData(file, ea);
}

static handleSection(file, name, start, end, attr)
{
	auto ea;
	
	fprintf(file, "\n; %08x - %08x %s\n", start, end - 1, name);
	ea = start - 1;
	for (ea = NextHead(ea, end); ea != BADADDR; ea = NextHead(ea, end))
	{
        /* switch(attr)
		{
			case SECTION_ATTR_CODE:
				if(isCode(ea))
					handleCode(file, ea);
				break;
			case SECTION_ATTR_DATA:
				if(isData(ea))
					handleData(file, ea);
				break;
			default:
				handleSymbol(file, ea);
				break;
		} */
		// idc不支持switch-case语句
		if(has_name(GetFlags(ea)))
		{
			//if(attr == SECTION_ATTR_DATA && isData(ea))
			if(attr == SECTION_ATTR_DATA)
				handleData(file, ea);
			else
				if(attr == SECTION_ATTR_CODE && isCode(ea))
					handleCode(file, ea);
				else
					if(attr != SECTION_ATTR_DATA && attr != SECTION_ATTR_CODE)
						handleSymbol(file, ea);
		}
    }
}

static setFile()
{
	auto file, filename;
	
	filename = get_input_file_path();
	filename = substr(filename, 0, strstr(filename, "."));
	filename = sprintf("%s.sym", filename);
	file = fopen(filename, "w");
	while(!file)
	{
		filename = AskFile(1, "*.sym", "export symbolic debug info to");
		file = fopen(filename, "w");
	}
	fprintf(file, "; This file is generated by sync_to_nogba_debugger.idc and synchronous with \"%s\".\n", get_idb_path());
	
	return file;
}

static sync(file)
{
	handleSection(file, "WRAM", 0x2000000, 0x2040000, SECTION_ATTR_DATA);
	handleSection(file, "IRAM", 0x3000000, 0x3008000, SECTION_ATTR_DATA | SECTION_ATTR_CODE);
	handleSection(file, "IORegisters", 0x4000000, 0x04000400, SECTION_ATTR_DATA);
	handleSection(file, "ROM", 0x8000000, 0xA000000, SECTION_ATTR_DATA | SECTION_ATTR_CODE);
	
	print("Synchronization to NO$GBA debugger complete!");
}

class sync_to_nogba_plugin_t
{
	sync_to_nogba_plugin_t()
	{
		this.flags = 0;
		this.wanted_name = "Sync to NO$GBA debugger";
		this.wanted_hotkey = "Alt-9";
		this.comment = "Share knowledge with NO$GBA debugger";
		this.help = "Created by laqieer.\nVisit https://github.com/laqieer for the latest version.";
		this.file = 0;
	}
	
	init()
	{
		if(substr(get_root_filename(), strstr(get_root_filename(), ".") + 1, -1) == "gba" || GetProcessorName() == "ARM" && substr(get_root_filename(), strstr(get_root_filename(), ".") + 1, -1) == "elf")
			return PLUGIN_OK;
		else
			return PLUGIN_SKIP;
	}
	
	term()
	{
		sync(this.file);
		fclose(this.file);
	}
	
	run(arg)
	{
		if(!this.file)
		{
			if(CreateArray("no_gba_sym_file") == -1)
				this.file = GetArrayElement(AR_STR, GetArrayId("no_gba_sym_file"), 1);
			else
			{
				this.file = setFile();
				SetArrayString(GetArrayId("no_gba_sym_file"), 1, this.file);
			}
		}
		sync(this.file);
	}
}

static PLUGIN_ENTRY()
{
	return sync_to_nogba_plugin_t();
}